upstream jalpamf {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
  server unix:/media/main_storage/anup/inventory-management/run/gunicorn_jalpa.sock  fail_timeout=0;
}

server {

    listen   80;
    server_name inventory.jalpamf.com;

    client_max_body_size 4G;
    access_log /media/main_storage/anup/inventory-management/logs/acces_log_nginx.log;
    error_log /media/main_storage/anup/inventory-management/logs/acces_log_error.log;

    location /static/ {
        # /media/main_storage/anup/inventory-management/static
        alias   /media/main_storage/anup/inventory-management/static/;
        expires 1y;
        add_header Pragma public;
        add_header Cache-Control "public, no-transform";
    }
  #   location /rev/ {
	# alias /home/nsdev/deployes/anup/rev/revslider-standalone/;
  #   }
location /media/ {
        alias   /media/main_storage/anup/inventory-management/media/;
        expires 1y;
        add_header Pragma public;
        add_header Cache-Control "public, no-transform";
    }

    location / {

        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://jalpamf;
            break;
        }
    }
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini

        # With php5-cgi alone:
        #fastcgi_pass 127.0.0.1:9000;
        # With php5-fpm:
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
    }
    # Error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /home/ubuntu/static/;
    }
}
